{"template":"// template lang=\"pug\"\n\ndiv\n  code.hljs(\n    v-show=\"isPrinting\"\n  ) {{ codeProgress }}\n\n  code(\n    v-show=\"!isPrinting\",\n    v-html=\"codeHtml\",\n    :class=\"codeClass\"\n  )","script":"// script\n\nimport hljs from 'highlight.js/lib/highlight'\nimport 'highlight.js/styles/atom-one-dark.css'\n\nexport default {\n  data () {\n    return {\n      isPrinting: true,\n      counter: 0,\n      codeProgress: '',\n      codeHtml: '',\n      codeClass: ['hljs']\n    }\n  },\n\n  props: {\n    lang: {\n      type: String,\n      default: ''\n    },\n\n    codes: {\n      type: String,\n      required: true\n    }\n  },\n\n  computed: {\n    codeBlock () {\n      return `${this.codes} `\n    },\n\n    hlAnalysis () {\n      return hljs.highlightAuto(this.codeBlock)\n    }\n  },\n\n  methods: {\n    printCodes () {\n      return new Array(this.codeBlock.length)\n        .fill(() => new Promise(resolve => setTimeout(this.printChar(resolve), 10)))\n        .reduce((cur, next) => cur.then(next), Promise.resolve())\n        .then(() => {\n          const { value, language } = this.hlAnalysis\n\n          this.isPrinting = false\n          this.codeHtml = value\n          this.codeClass.push(this.lang, language)\n        })\n    },\n\n    printChar (resolve) {\n      return () => {\n        this.codeProgress += this.codeBlock[this.counter++]\n\n        resolve()\n      }\n    }\n  },\n\n  mounted () {\n    hljs.registerLanguage(this.lang, require(`highlight.js/lib/languages/${this.lang}`))\n\n    this.printCodes()\n  }\n}"}