//- template lang="pug"
pre
  code(
    v-if="codeHtml",
    v-html="codeHtml"
  )
  // await

  code(v-if="isPrinting") {{ codeProgress }}
  // await

// script
import hljs from 'highlight.js/lib/highlight'

import stylus from 'highlight.js/lib/languages/stylus'
import javascript from 'highlight.js/lib/languages/javascript'
import scss from 'highlight.js/lib/languages/scss'
// await

import promisify from 'assets/js/promisify'
// await

const langs = {
  stylus,
  javascript,
  scss
}

Object
  .keys(langs)
  .forEach(lang => hljs.registerLanguage(lang, langs[lang]))
// await

export default {
  data () {
    return {
      isPrinting: true,
      codeCounter: 0,
      blockCounter: 0,
      charCounter: 0,
      codeHtml: '',
      codeProgress: ''
    }
  },
// await

  props: {
    codesText: {
      type: String,
      required: true
    },
// await

    callback: {
      type: Function,
      default () {}
    }
  },
// await

  computed: {
    codes () {
      return this.codesText
        .split(/ *\/\/ await\n/g)
    },

    curBlock () {
      return this.codes[this.blockCounter]
    }
  },
// await

  methods: {
    printCodes () {
      return promisify(this.codes.length, this.printBlock, 400, () => {

      })
    },
// await

    printBlock (resolve) {
      this.$el.scrollTop = this.$el.scrollHeight

      if (this.curBlock === undefined) {
        return
      }

      return () => {
        promisify(this.curBlock.length, this.printChar, 15, () => {
          this.codeProgress = ''
          this.codeHtml += hljs.highlightAuto(this.curBlock).value

          this.blockCounter++

          if (this.curBlock && this.curBlock.includes('++vue')) {
            this.$emit('add-vue')

            this.blockCounter++
          }

          this.charCounter = 0

          resolve()
        })
      }
    },
// await

    printChar (resolve) {
      const curChar = this.curBlock[this.charCounter]

      this.$el.scrollTop = this.$el.scrollHeight

      return () => {
        this.codeProgress += curChar

        this.charCounter++

        resolve()
      }
    }
  },
// await

  mounted () {
    this.printCodes()
  }
}
