//- template lang="pug"
section
  h2 {{ titleProgress }}

  pre
    code(v-html="codeHtml")

    code {{ codeProgress }}
  // await

// script
import hljs from 'highlight.js/lib/highlight'

import stylus from 'highlight.js/lib/languages/stylus'
import javascript from 'highlight.js/lib/languages/javascript'

import promisify from 'assets/js/promisify'
import scrollToBottom from 'assets/js/scrollToBottom'
// await

const langs = {
  stylus,
  javascript
}

Object
  .keys(langs)
  .forEach(lang =>
    hljs.registerLanguage(lang, langs[lang]))
// await

export default {
  data () {
    return {
      blockCounter: 0,
      charCounter: 0,
      codeHtml: '',
      codeProgress: '',
      titleProgress: ''
    }
  },

  props: {
    codesText: String
  },
// await

  computed: {
    codes () {
      return this.codesText
        .split(/ *\/\/ await\n/g)
    },

    curBlock () {
      return this.codes[this.blockCounter]
    },

    filename () {
      const file = this.codes[0].includes('#app')
        ? 'App.vue'
        : 'Codes.vue'

      return file.split('')
    }
  },
// await

  methods: {
    printCodes () {
      let index = 0

      const printTitle = resolve =>
        () => {
          this.titleProgress += this.filename[index++]
          resolve()
        }

      promisify({
        promiseNumber: this.filename.length,
        step: printTitle,
        interval: 50
      }, () => {
        promisify({
          promiseNumber: this.codes.length,
          step: this.printBlock,
          interval: 300
        })
      })
    },
// await

    printBlock (resolve) {
      scrollToBottom(this)

      if (this.curBlock === undefined) {
        return
      }

      return () => {
        promisify({
          promiseNumber: this.curBlock.length,
          step: this.printChar,
          interval: 6
        }, () => {
          this.codeProgress = ''
          this.codeHtml += hljs.highlightAuto(this.curBlock).value

          this.blockCounter++
          this.charCounter = 0

          resolve()
        })
      }
    },
// await

    printChar (resolve) {
      const curChar = this.curBlock[this.charCounter]

      scrollToBottom(this)

      return () => {
        this.codeProgress += curChar
        this.charCounter++

        resolve()
      }
    }
  },
// await

  mounted () {
    this.printCodes()
  }
}
